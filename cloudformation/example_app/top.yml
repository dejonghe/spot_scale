AWSTemplateFormatVersion: '2010-09-09'
Description: Nested Stack for Example app Spot Fleet POC
Parameters:
  SecretId:
    Description: Id of secret to look up
    Type: String
    Default: mytestsecret
  Project:
    Description: Name of Project
    Type: String
    Default: SpotFleetExample
  Environment:
    Description: Environment name assigned to EC2 instances (e.g. 'prod' or 'test').
    Type: String
    ConstraintDescription: Must be a string.
  Release:
    Description: Release Number
    Type: String
    Default: '0.0.1'
  CloudToolsBucket:
    Description: Name of Config Bucket
    Type: String
  KeyPair:
    Description: KeyPair Name for Instances.
    Type: String
    ConstraintDescription: Must be a existing Key Pair.
  InstanceType:
    Description: Instance Type for Instances.
    Type: String
    ConstraintDescription: Must be a existing an EC2 Instance Type.
  AMI:
    Description: The AMI used for ECS Cluster.
    Type: String
    Default: ami-cb17d8b6
    ConstraintDescription: must be a string.
  VPC:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
  VPCCIDR:
    Description: CIDR block of the VPC.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: '0.0.0.0/0'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be valid CIDR notation (i.e. x.x.x.x/x).
  PublicSubnets:
    Description: List of public subnets
    Type: String
  PrivateSubnets:
    Description: List of private subnets
    Type: String
  Email:
    Description: Email address to receive SNS notifications
    Type: String
    Default: 'defaut@not.used'
    MinLength: '4'
    MaxLength: '128'
    AllowedPattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$
    ConstraintDescription: must be a valid email address.


Mappings: {}
Conditions: {}
Resources:
  SNS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 
        - 'https://s3.${REGION}.amazonaws.com/${BUCKET}/${RELEASE}/cloudformation/example_app/sns.yml'
        - REGION: !Ref 'AWS::Region'
          BUCKET: !Ref 'CloudToolsBucket'
          RELEASE: !Ref 'Release'
      Parameters:
        Email: !Ref 'Email'
        Environment: !Ref 'Environment'
  IAM:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 
        - 'https://s3.${REGION}.amazonaws.com/${BUCKET}/${RELEASE}/cloudformation/example_app/iam.yml'
        - REGION: !Ref 'AWS::Region'
          BUCKET: !Ref 'CloudToolsBucket'
          RELEASE: !Ref 'Release'
  BotoInterface:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Role: !GetAtt "IAM.Outputs.BotoInterfaceArn"
      Code: 
        S3Bucket: !Ref 'CloudToolsBucket'
        S3Key: !Join [ '/', [ !Ref 'Release', 'lambda/cfn-boto-interface.zip' ] ]
      Timeout: '60'
      Runtime: python3.6


  SecurityGroups:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 
        - 'https://s3.${AWS::Region}.amazonaws.com/${CloudToolsBucket}/${Release}/cloudformation/example_app/security_groups.yml'
        - REGION: !Ref 'AWS::Region'
      Parameters:
        VPC: !Ref 'VPC'
        VPCCIDR: !Ref 'VPCCIDR'
  SecretString:
    Type: Custom::FetchSecret
    Properties:
      ServiceToken: !GetAtt 'BotoInterface.Arn'
      # When a create event type is send to the lambda use this object
      Create:
        PhysicalResourceId: '!Create[0].SecretString'
        ResponseData:
          VersionId: '!Create[0].VersionId'
        Commands:
          - Client: secretsmanager
            Method: get_secret_value
            Arguments:
              SecretId: !Ref 'SecretId'
      Update:
        Replace: 'True'


  ECSCluster:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 
        - 'https://s3.${AWS::Region}.amazonaws.com/${CloudToolsBucket}/${Release}/cloudformation/common/ecs/spot_cluster.yml'
        - REGION: !Ref 'AWS::Region'
      Parameters:
        CloudToolsBucket: !Ref 'CloudToolsBucket'
        Release: !Ref 'Release'
        Role: ECSCluster
        Environment: !Ref 'Environment'
        SubnetList: !Ref 'PrivateSubnets'
        InstanceType: m5.large
        AMI: !Ref 'AMI'
        KeyPair: !Ref 'KeyPair'
        InitCapacity: 2
        InstanceProfile: !GetAtt 'IAM.Outputs.InstanceProfileArn'
        SpotFleetRole: !GetAtt 'IAM.Outputs.SpotFleetRoleArn'
        ScalingRole: !GetAtt 'IAM.Outputs.ScalingRoleArn'
        SpaceMetricRole: !GetAtt "IAM.Outputs.SpaceMetricArn"
        SecurityGroups: !Join [ ',', [ !GetAtt 'SecurityGroups.Outputs.SpotFleet' ] ]
        CloudWatchAlarmSNSTopic: !GetAtt 'SNS.Outputs.Alert'
  Service:
    DependsOn: []
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join
        - ''
        - - https://s3.
          - !Ref 'AWS::Region'
          - .amazonaws.com/
          - !Ref 'CloudToolsBucket'
          - /
          - !Ref 'Release'
          - /cloudformation/common/ecs/service.yml
      Parameters:
        ContainerImage: 222797466467.dkr.ecr.us-east-1.amazonaws.com/cicd-demo:0.2.0
        ContainerCpuUnits: 1024
        ContainerMemory: 1024
        ContainerName: example
        EcsCluster: !GetAtt 'ECSCluster.Outputs.ECSClusterName'
        EcsServiceRole: 'arn:aws:iam::222797466467:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS'
        HostedZoneName: 'awsinternal.alt.rightbrainnetworks.com'
        Project: !Ref 'Project'
        Environment: !Ref 'Environment'
        ELBSecurityGroups: !Join [ ',', [ !GetAtt 'SecurityGroups.Outputs.SpotFleet' ] ]
        ELBSubnetList: !Ref 'PublicSubnets'



Outputs:
#  LaunchTemplateGetAtt:
#    Value: !GetAtt 'InstanceLaunchTemplate.LaunchTemplateVersion'
#  LaunchTemplateRef:
#    Value: !Ref 'InstanceLaunchTemplate'
  Secret:
    Value: !Ref 'SecretString'
