AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Cluster template - deploys two asg, one spot, one not, joins both to ecs cluster.
Parameters:
  Release:
    Description: Release Number
    Type: String
    Default: '0.0.1'
  CloudToolsBucket:
    Description: Name of Config Bucket
    Type: String
  Role:
    Description: Cluster Role Name
    Type: String
  Environment:
    Description: Name of the environment deployed; used in tags and names
    Type: String
  SubnetList:
    Description: A list of public subnet IDs in the VPC for EC2 instances
    Type: List<AWS::EC2::Subnet::Id>
  InstanceType:
    Description: EC2 Instance type for Saltstack Master server host(s)
    Type: String
    Default: "m5.large"
  AMI:
    Description: AMI ID
    Type: AWS::EC2::Image::Id
  KeyPair:
    Description: EC2 Key Pair
    Type: String
  RootVolumeDevice:
    Description: Device to attach Root Volume, HVM AMIs can differ so you have a choice, for ECS Optimized use default.
    Type: String
    Default: /dev/xvda
    AllowedValues:
      - /dev/sda1
      - /dev/xvda
  RootEBSVolumeSize:
    Description: Size in GB of the root volume to attach to this EC2 instance.
    Type: Number
    Default: '10'
    MinValue: '10'
    MaxValue: '1024'
  EBSVolumeType:
    Description: Type of EBS volume.
    Type: String
    Default: gp2
    AllowedValues:
      - standard
      - gp2
    ConstraintDescription: Must be 'standard' or 'gp2'.
  DeleteEBSVolumesOnTermination:
    Description: Should the EBS volumes be deleted upon termination.
    Type: String
    Default: 'True'
    AllowedValues:
      - 'True'
      - 'False'
    ConstraintDescription: Must be 'True' or 'False'.
  HealthCheckGracePeriod:
    Description: The length of time in seconds after a new EC2 instance comes into
      service that Auto Scaling starts checking its health.
    Type: Number
    Default: '300'
    MinValue: '1'
    ConstraintDescription: Must be an integer.
  InitCapacity:
    Description: Inital Capacity for SpotFleet
    Type: Number
    Default: '2'
  OnDemandMinInstancesCount:
    Description: Minimum number of EC2 instances in the On-Demand ASG.
    Type: Number
    Default: '1'
  RollingUpdateMinInstancesInService:
    Description: Minimum number of EC2 instances to remain in service during rolling
      update.
    Type: Number
    Default: '2'
    MinValue: '1'
    MaxValue: '10000'
  RollingUpdateMaxBatchSize:
    Description: Maximum number of EC2 instances for batch during rolling update.
    Type: Number
    Default: '1'
    MinValue: '1'
    MaxValue: '10000'
  RollingUpdatePauseTime:
    Description: Amount of time to pause before adding or removing autoscaling instances
      during rolling update.
    Type: String
    Default: PT3M30S
  InstanceProfile:
    Description: ARN of the IAM Instance Profile which allows access to resources,
      including Docker images
    Type: String
  SpotFleetRole:
    Description: ARN of the IAM Role used by SpotFleet
    Type: String
  ScalingRole:
    Description: ARN of the IAM Role used by SpotFleet Scaling Policy
    Type: String
  SpaceMetricRole:
    Description: ARN of the IAM Role used by SpaceMetric Lambda
    Type: String
  SecurityGroups:
    Description: A security groups assigned to EC2 instances in the SpotFleet.
    Type: List<AWS::EC2::SecurityGroup::Id>
  CloudWatchAlarmSNSTopic:
    Description: SNS topic to send AutoScaling Events to.
    Type: String
    ConstraintDescription: Must be an SNS Topic.
  HighCPUThreshold:
    Description: Average CPU threshold for scaling up EC2 instances in ASG. (Greater
      than or equal to)
    Type: Number
    Default: '75'
    MinValue: '1'
  HighCPUReservation:
    Description: Average CPU Reservation for scaling up EC2 instances in ASG. (Greater
      than or equal to)
    Type: Number
    Default: '86'
    MinValue: '1'
  HighCPUPeriod:
    Description: The time over which the specified statistic is applied. You must
      specify a time in seconds that is also a multiple of 60.
    Type: Number
    Default: '180'
    MinValue: '60'
    ConstraintDescription: Must be an integer that is a multiple of 60.
  LowCPUThreshold:
    Description: Average CPU threshold for scaling down EC2 instances in ASG. (Less
      than or equal to)
    Type: Number
    Default: '25'
    MinValue: '1'
  LowCPUReservation:
    Description: Average CPU Reservation for scaling down EC2 instances in ASG. (Less
      than or equal to)
    Type: Number
    Default: '40'
    MinValue: '1'
  LowCPUPeriod:
    Description: The time over which the specified statistic is applied. You must
      specify a time in seconds that is also a multiple of 60.
    Type: Number
    Default: '180'
    MinValue: '60'
    ConstraintDescription: Must be an integer that is a multiple of 60.
  ScaleUpAdjustment:
    Description: Number off EC2 instances to add when scaling up.
    Type: Number
    Default: '2'
  ScaleUpCooldown:
    Description: Number of seconds for cooldown between scale-up events.
    Type: Number
    Default: '300'
  ScaleDownAdjustment:
    Description: Number of EC2 instances to remove when scaling down.
    Type: String
    Default: '-2'
  ScaleDownCooldown:
    Description: Number of seconds for cooldown between scale-down events.
    Type: Number
    Default: '300'
  SpotPercent:
    Description: The percentage you're willing to pay for a spot instance
    Type: Number
    Default: 100
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster

  LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        TagSpecifications: 
          - ResourceType: instance
            Tags:
            - Key: Name
              Value: !Join
                - '-'
                - - !Ref 'Environment'
                  - !Ref 'Role'
                  - SpotFleet
        BlockDeviceMappings: 
          - DeviceName: !Ref 'RootVolumeDevice'
            Ebs:
              VolumeSize: !Ref 'RootEBSVolumeSize'
              VolumeType: !Ref 'EBSVolumeType'
              DeleteOnTermination: !Ref 'DeleteEBSVolumesOnTermination'
        IamInstanceProfile: 
          Arn: !Ref 'InstanceProfile'
        SecurityGroupIds: !Ref 'SecurityGroups'
        KeyName: !Ref 'KeyPair'
        ImageId: !Ref 'AMI'
        UserData: !Base64
          Fn::Sub:
          - "#!/usr/bin/env bash\n
            yum -y install aws-cli aws-cfn-bootstrap\n
            /opt/aws/bin/cfn-init -v --stack ${STACKNAME} --resource LaunchTemplate --region ${REGION}"
          - REGION: !Ref 'AWS::Region'
            STACKNAME: !Ref 'AWS::StackName'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Join [ "", [ "#!/bin/bash\n", "echo ECS_CLUSTER=", !Ref 'ECSCluster', " >> /etc/ecs/ecs.config" ] ]
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ''
                - - '[main]'
                  - "\n"
                  - stack=
                  - !Ref 'AWS::StackId'
                  - "\n"
                  - region=
                  - !Ref 'AWS::Region'
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - '[cfn-auto-reloader-hook]'
                  - "\n"
                  - triggers=post.update
                  - "\n"
                  - path=Resources.LaunchTemplate.Metadata.AWS::CloudFormation::Init
                  - "\n"
                  - action=/opt/aws/bin/cfn-init -v
                  - ' --stack '
                  - !Ref 'AWS::StackName'
                  - ' --resource LaunchConfig'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - "\n"
                  - runas=root
                  - "\n"
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

  SpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: diversified
        ExcessCapacityTerminationPolicy: default
        IamFleetRole: !Ref 'SpotFleetRole'
        ReplaceUnhealthyInstances: true
        TargetCapacity: !Ref 'InitCapacity'
        TerminateInstancesWithExpiration: false
        Type: maintain
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref 'LaunchTemplate'
              Version: !GetAtt 'LaunchTemplate.LatestVersionNumber'
            Overrides:
              - InstanceType: 'm5.large'
                SubnetId: !Select [ '0', !Ref 'SubnetList' ]
                WeightedCapacity: '2'
              - InstanceType: 'm5.large'
                SubnetId: !Select [ '1', !Ref 'SubnetList' ]
                WeightedCapacity: '2'
              - InstanceType: 'm5.large'
                SubnetId: !Select [ '2', !Ref 'SubnetList' ]
                WeightedCapacity: '2'
              - InstanceType: 'm5.large'
                SubnetId: !Select [ '3', !Ref 'SubnetList' ]
                WeightedCapacity: '2'
              - InstanceType: 'm5.xlarge'
                SubnetId: !Select [ '0', !Ref 'SubnetList' ]
                WeightedCapacity: '4'
              - InstanceType: 'm5.xlarge'
                SubnetId: !Select [ '1', !Ref 'SubnetList' ]
                WeightedCapacity: '4'
              - InstanceType: 'm5.xlarge'
                SubnetId: !Select [ '2', !Ref 'SubnetList' ]
                WeightedCapacity: '4'
              - InstanceType: 'm5.xlarge'
                SubnetId: !Select [ '3', !Ref 'SubnetList' ]
                WeightedCapacity: '4'

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 'False'
      ImageId: !Ref 'AMI'
      KeyName: !Ref 'KeyPair'
      IamInstanceProfile: !Ref 'InstanceProfile'
      SecurityGroups: !Ref 'SecurityGroups'
      InstanceType: !Ref 'InstanceType'
      BlockDeviceMappings:
        - DeviceName: !Ref 'RootVolumeDevice'
          Ebs:
            VolumeSize: !Ref 'RootEBSVolumeSize'
            VolumeType: !Ref 'EBSVolumeType'
            DeleteOnTermination: !Ref 'DeleteEBSVolumesOnTermination'
      UserData: !Base64
        Fn::Sub:
        - "#!/usr/bin/env bash\n
          yum -y install aws-cli aws-cfn-bootstrap\n
          /opt/aws/bin/cfn-init -v --stack ${STACKNAME} --resource LaunchTemplate --region ${REGION}\n
          /opt/aws/bin/cfn-signal -e $? --stack ${STACKNAME} --resource OnDemand --region ${REGION}\n"
        - REGION: !Ref 'AWS::Region'
          STACKNAME: !Ref 'AWS::StackName'

  OnDemand:
    UpdatePolicy: 
      AutoScalingRollingUpdate: 
        MinInstancesInService: "1"
        MaxBatchSize: "1"
        PauseTime: "PT5M0S"
        WaitOnResourceSignals: "false"
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties: 
      VPCZoneIdentifier: !Ref 'SubnetList'
      LaunchConfigurationName: !Ref 'LaunchConfig'
      HealthCheckType: EC2
      HealthCheckGracePeriod: !Ref 'HealthCheckGracePeriod'
      MaxSize: "8"
      MinSize: "0"
      
  SpotScaleTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Join [ '/', [ 'spot-fleet-request', !Ref 'SpotFleet' ]]
      RoleARN: !Ref 'ScalingRole'
      ScalableDimension: ec2:spot-fleet-request:TargetCapacity
      ServiceNamespace: ec2

  SpotScaling:
    DependsOn: SpaceMetricSchedule
    Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties: 
      PolicyName: !Join ['-',[!Ref 'Environment', 'Spot-Cluster-Target-Track' ]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref 'SpotScaleTarget'
      TargetTrackingScalingPolicyConfiguration: 
        CustomizedMetricSpecification:
          Dimensions:
            - Name: Cluster
              Value: !Ref 'ECSCluster'
          MetricName: SchedulableContainers
          Namespace: AWS/ECS
          Statistic: Average
          Unit: Count
        DisableScaleIn: False
        ScaleInCooldown: 300
        ScaleOutCooldown: 300
        TargetValue: 1

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'OnDemand'
      Cooldown: !Ref 'ScaleUpCooldown'
      ScalingAdjustment: !Ref 'ScaleUpAdjustment'
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'OnDemand'
      Cooldown: !Ref 'ScaleDownCooldown'
      ScalingAdjustment: !Ref 'ScaleDownAdjustment'

  SpaceMetric:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Role: !Ref 'SpaceMetricRole'
      Code:
        S3Bucket: !Ref 'CloudToolsBucket'
        S3Key: !Join [ '/', [ !Ref 'Release', 'lambda/ecs_space_metric.zip' ] ]
      Timeout: '60'
      Runtime: python3.6
  SpacePermission:
    Type: "AWS::Lambda::Permission"
    Properties: 
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref 'SpaceMetric'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt 'SpaceMetricSchedule.Arn'
  SpaceMetricSchedule:
    Type: "AWS::Events::Rule"
    Properties: 
      Description: 'Fires SpaceMetric Lambda for cluster'
      ScheduleExpression: 'rate(2 minutes)'
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt 'SpaceMetric.Arn'
          Id: !Join ['-', [!Ref 'Environment', !Ref 'Role', 'Cluster-Space' ]]
          Input: !Sub 
            - '{"Cluster": "${Cluster}"}'
            - Cluster: !Ref 'ECSCluster'

  RequestOnDemand:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Pending Spot Capcity High
      MetricName: PendingCapacity
      Namespace: AWS/EC2Spot
      Statistic: Average
      Period: !Ref 'HighCPUPeriod'
      EvaluationPeriods: '1'
      Threshold: 3
      AlarmActions:
        - !Ref 'ScaleUpPolicy'
        - !Ref 'CloudWatchAlarmSNSTopic'
      OKActions: []
      Dimensions:
        - Name: FleetRequestId
          Value: !Ref 'SpotFleet'
      ComparisonOperator: GreaterThanOrEqualToThreshold
  ReleaseOnDemand:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Pending Spot Capacity Low
      MetricName: PendingCapacity
      Namespace: AWS/EC2Spot
      Statistic: Average
      Period: !Ref 'LowCPUPeriod'
      EvaluationPeriods: '1'
      Threshold: 1
      AlarmActions:
        - !Ref 'ScaleDownPolicy'
        - !Ref 'CloudWatchAlarmSNSTopic'
      OKActions: []
      Dimensions:
        - Name: FleetRequestId
          Value: !Ref 'SpotFleet'
      ComparisonOperator: LessThanOrEqualToThreshold
#  CloudWatchAlarmHighCPU:
#    Type: AWS::CloudWatch::Alarm
#    Properties:
#      AlarmDescription: High CPU
#      MetricName: CPUUtilization
#      Namespace: AWS/EC2
#      Statistic: Average
#      Period: !Ref 'HighCPUPeriod'
#      EvaluationPeriods: '1'
#      Threshold: !Ref 'HighCPUThreshold'
#      AlarmActions:
#        - !Ref 'ScaleUpPolicy'
#        - !Ref 'CloudWatchAlarmSNSTopic'
#      OKActions: []
#      Dimensions:
#        - Name: AutoScalingGroupName
#          Value: !Ref 'OnDemandASG'
#      ComparisonOperator: GreaterThanOrEqualToThreshold
#  CloudWatchAlarmLowCPU:
#    Type: AWS::CloudWatch::Alarm
#    Properties:
#      AlarmDescription: Low CPU
#      MetricName: CPUUtilization
#      Namespace: AWS/EC2
#      Statistic: Average
#      Period: !Ref 'LowCPUPeriod'
#      EvaluationPeriods: '1'
#      Threshold: !Ref 'LowCPUThreshold'
#      AlarmActions:
#        - !Ref 'ScaleDownPolicy'
#      OKActions: []
#      Dimensions:
#        - Name: AutoScalingGroupName
#          Value: !Ref 'OnDemandASG'
#      ComparisonOperator: LessThanOrEqualToThreshold

Outputs:
  ECSClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref 'ECSCluster'
